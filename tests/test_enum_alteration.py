from alembic import autogenerate
from alembic.runtime.migration import MigrationContext
from sqlalchemy import MetaData, Table, Column, Integer
from sqlalchemy.dialects import postgresql


def get_old_metadata() -> MetaData:
    m = MetaData()

    Table(
        "user",
        m,
        Column("id", Integer, primary_key=True),
        Column("status", postgresql.ENUM("active", "passive",
                                         name="user_status"))
    )

    return m


def get_metadata() -> MetaData:
    m = MetaData()

    Table(
        "user",
        m,
        Column("id", Integer, primary_key=True),
        Column("status", postgresql.ENUM("active", "passive", "engineer",
                                         name="user_status"))
    )

    return m


def test_add_new_enum_value(connection):
    get_old_metadata().create_all(connection)
    opts = {
        "alembic_module_prefix": "op.",
        "sqlalchemy_module_prefix": "sa.",
        # "include_object": _default_object_filters,
        # "include_name": _default_name_filters,

        "compare_type": True,
        "compare_server_default": True,
        "target_metadata": get_metadata(),
        "upgrade_token": "upgrades",
        "downgrade_token": "downgrades",
    }
    context = MigrationContext.configure(
        connection=connection,
        opts=opts,
        dialect=postgresql.dialect,
    )
    template_args = {}
    autogenerate._render_migration_diffs(context, template_args)

    assert (template_args["upgrades"] ==
            """# ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values('public', 'user_status', ['active', 'passive', 'engineer'], [('user', 'status')])
    # ### end Alembic commands ###""")
    assert (template_args["downgrades"] ==
            """# ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values('public', 'user_status', ['active', 'passive'], [('user', 'status')])
    # ### end Alembic commands ###""")
